#!/usr/bin/env python
from SCons.Script import EnsureSConsVersion,EnsurePythonVersion,Environment,SConscript,ARGUMENTS
import os
import sys


EnsureSConsVersion(3, 0, 0)
EnsurePythonVersion(3, 9)



env = Environment(ENV = os.environ)

def makegodot():
  customgdargs: dict = {"precision": "double", "module_mono_enabled": "yes"}
  for key in ARGUMENTS:
    if key.startswith("gds_"):
      customgdargs[key[4:]] = ARGUMENTS[key]

  customgdargsstr: str = ""

  for key in customgdargs:
    customgdargsstr += key + "=" + str(customgdargs[key]) + " "


  # using chdir=path is worse due to non-multithread!
  env.Command(
   target = 'godot_engine_binary', 
   source = 'godot/SConstruct', 
   action = [f'cd Server/godot && scons {customgdargsstr}']
   ) # Hacky? Yes, should've used CMake...


  # initial compile => glue codegen (fails) => make pkgs (success) => glue codegen (success)
  # I assume this is UB and will probably change in upcoming months...

  env.Command(
    target = 'godot_engine_managedlib', 
    source = 'godot/SConstruct', 
    action = 'cd Server/godot && ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --precision=double --push-nupkgs-local ../Nuget-Source')

  env.Command(
    target = 'godot_engine_gluecode', 
    source = 'godot/SConstruct',
    action = [f'cd Server/godot && ./bin/godot.linuxbsd.editor.double.x86_64.mono --headless --generate-mono-glue modules/mono/glue'])

  env.Depends('godot_engine_managedlib','godot_engine_binary')
  env.Depends('godot_engine_gluecode','godot_engine_managedlib')
  # TODO: Centralise
  env.Alias('godot','godot_engine_gluecode')

def make_export_templates():
  customgdargs: dict = {"arch": "x86_64", "platform": "linuxbsd", "target": "template_debug", "precision": "double", "module_mono_enabled": "yes"}
  for key in ARGUMENTS:
    if key.startswith("s_ex_"):
      customgdargs[key[5:]] = ARGUMENTS[key]

  customgdargsstr: str = ""
  for key in customgdargs:
    customgdargsstr += key + "=" + str(customgdargs[key]) + " "

  env.Command(
    target = 'export_template_server', 
    source = 'godot/SConstruct',
    action = [f'cd Server/godot && scons {customgdargsstr}'])

  # env.Alias('s_ex_windows_release','export_template_server')

  env.Depends('export_template_server', 'godot')


def export_game():
  env.Command(
    target = 'export_game_server', 
    source = 'godot/SConstruct',
    action = ['cd Server/AZ-1S && ../godot/bin/godot.linuxbsd.editor.double.x86_64.mono --headless --export-debug "Linux/X11" export/AZ-1S.x86_64'])

  sub = env.Substfile('AZ-1S/export/AZ-1S.sh', SUBST_DICT = {'AZ-1S.x86_64"' : 'AZ-1S.x86_64" --headless'})

  env.Command(
    target = 'fixlauncher', 
    source = 'godot/SConstruct', 
    action = 'cd Server/AZ-1S/export && mv AZ-1S AZ-1S.sh && chmod 755 AZ-1S.sh')

  env.Depends('export_game_server', 'export_template_server')
  env.Depends('fixlauncher',sub)
  env.Depends(sub, 'export_game_server')
  # TODO: Centralise
  env.Alias("export_server", 'fixlauncher')
  env.Default('export_server')


def run_game():
  env.Command(
    target = 'run_exported_server_current', 
    source = 'godot/SConstruct',
    action = ['cd Server/AZ-1S/export && ./AZ-1S.sh --headless'])

  # TODO: Centralise
  env.Alias('run_server_test','run_exported_server_current')
  # env.Depends('run_server_test', 'export_server') # shouldn't be disabled but ehhhhh blame dotnet




makegodot()
make_export_templates()
export_game()
run_game()
# make_server()
