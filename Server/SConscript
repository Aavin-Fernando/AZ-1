#!/usr/bin/env python

EnsureSConsVersion(3, 0, 0)
EnsurePythonVersion(3, 9)

import os

env = Environment(ENV = os.environ)

def makegodot():
  customgdargs: dict = {"precision": "double", "module_mono_enabled": "yes"}
  for key in ARGUMENTS:
    if key.startswith("gds_"):
      customgdargs[key[4:]] = ARGUMENTS[key]

  customgdargsstr: str = ""

  for key in customgdargs:
    customgdargsstr += key + "=" + str(customgdargs[key]) + " "


  # using chdir=path is worse due to non-multithread!
  env.Command(
   target = 'godot_engine_binary', 
   source = 'godot/SConstruct', 
   action = [f'cd Server/godot && scons {customgdargsstr}']
   ) # Hacky? Yes, should've used CMake...


  # initial compile => glue codegen (fails) => make pkgs (success) => glue codegen (success)
  # I assume this is UB and will probably change in upcoming months...

  env.Command(
    target = 'godot_engine_managedlib', 
    source = 'godot/SConstruct', 
    action = 'cd Server/godot && ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --precision=double --push-nupkgs-local ../Nuget-Source')

  env.Command(
    target = 'godot_engine_gluecode', 
    source = 'godot/SConstruct',
    action = [f'cd Server/godot && ./bin/godot.linuxbsd.editor.double.x86_64.mono --headless --generate-mono-glue modules/mono/glue'])

  Depends('godot_engine_managedlib','godot_engine_binary')
  Depends('godot_engine_gluecode','godot_engine_managedlib')
    

def make_export_templates():
  env.Command(
    target = 'godot_export_templates', 
    source = 'godot/SConstruct',
    action = [f'cd Server/godot && scons platform=linuxbsd target=template_debug arch=x86_64'])
  # env.Command(
  #   target = 'godot_export_templates', 
  #   source = 'godot/SConstruct',
  #   action = [f'cd Server/godot && scons platform=linuxbsd target=template_release arch=x86_64'])

makegodot()
make_export_templates()
# make_server()